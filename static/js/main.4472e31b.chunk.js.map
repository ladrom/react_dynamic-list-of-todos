{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedTodo","setSelectedTodo","className","map","todo","id","title","completed","classNames","type","onClick","handleTodoButton","TodoFilter","setFilter","setSearchQuery","searchQuery","useState","isClearButtonVisible","setIsClearButtonVisible","onChange","event","target","value","placeholder","trim","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","closeModal","currentUser","setCurrentUser","findUser","a","targetUser","userId","useEffect","href","email","name","App","setTodos","loading","setLoading","filter","todosFromServer","filteredTodos","includes","filterTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4472e31b.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodo: Todo | null,\n  setSelectedTodo: (todo: Todo | null) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  const handleTodoButton = (todo: Todo) => {\n    return (\n      selectedTodo && selectedTodo.id === todo.id\n        ? setSelectedTodo(null)\n        : setSelectedTodo(todo)\n    );\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const {\n            id,\n            title,\n            completed,\n          } = todo;\n\n          return (\n            <tr data-cy=\"todo\" key={id}>\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={\n                  classNames(\n                    {\n                      'has-text-success': completed,\n                      'has-text-danger': !completed,\n                    },\n                  )\n                }\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => handleTodoButton(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames({\n                      'far fa-eye': !selectedTodo\n                        || selectedTodo.id !== todo.id,\n                      'far fa-eye-slash': selectedTodo\n                        && selectedTodo.id === todo.id,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { ChangeEvent, useState } from 'react';\n\ntype Props = {\n  setFilter: (todos: string) => void,\n  setSearchQuery: (query: string) => void,\n  searchQuery: string,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  setFilter,\n  setSearchQuery,\n  searchQuery,\n}) => {\n  const [isClearButtonVisible, setIsClearButtonVisible] = useState(false);\n  const handleFilterChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setFilter(event.target.value);\n  };\n\n  const handleQueryInput = (event: ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value);\n    setIsClearButtonVisible(event.target.value.trim() !== '');\n  };\n\n  const cleanQueryInput = () => {\n    setSearchQuery('');\n    setIsClearButtonVisible(false);\n  };\n\n  return (\n    (\n      <form className=\"field has-addons\">\n        <p className=\"control\">\n          <span className=\"select\">\n            <select\n              data-cy=\"statusSelect\"\n              onChange={handleFilterChange}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </span>\n        </p>\n\n        <p className=\"control is-expanded has-icons-left has-icons-right\">\n          <input\n            data-cy=\"searchInput\"\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Search...\"\n            value={searchQuery}\n            onChange={handleQueryInput}\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-magnifying-glass\" />\n          </span>\n\n          {isClearButtonVisible && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={cleanQueryInput}\n              />\n            </span>\n          )}\n        </p>\n      </form>\n    )\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo | null,\n  closeModal: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ selectedTodo, closeModal }) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n\n  const findUser = async () => {\n    let targetUser = null;\n\n    if (selectedTodo) {\n      targetUser = await getUser(selectedTodo.userId);\n    }\n\n    setCurrentUser(targetUser);\n  };\n\n  useEffect(() => {\n    findUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {selectedTodo && currentUser ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className=\"has-text-danger\">Planned</strong>\n\n              {' by '}\n\n              <a href={`mailto:${currentUser.email}`}>\n                {currentUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  const filterTodos = () => {\n    let filteredTodos: Todo[] = [...todos];\n\n    if (filter !== 'all') {\n      filteredTodos = filteredTodos.filter(todo => {\n        return filter === 'active' ? !todo.completed : todo.completed;\n      });\n    }\n\n    if (searchQuery.trim() !== '') {\n      filteredTodos = filteredTodos.filter(todo => {\n        return todo.title.includes(searchQuery.trim());\n      });\n    }\n\n    return filteredTodos;\n  };\n\n  const closeModal = () => {\n    setSelectedTodo(null);\n  };\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => {\n        setLoading(false);\n        setTodos(todosFromServer);\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                setFilter={setFilter}\n                setSearchQuery={setSearchQuery}\n                searchQuery={searchQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={filterTodos()}\n                  selectedTodo={selectedTodo}\n                  setSelectedTodo={setSelectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          closeModal={closeModal}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}